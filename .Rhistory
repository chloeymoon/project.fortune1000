color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
leaflet(d) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
leaflet(d) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
leaflet(d) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox")
leaflet(d) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
leaflet(d) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons()
leaflet(d) %>% addTiles() %>% addPolygons(poopup=~State)
leaflet(d) %>% addTiles() %>% addPolygons(popup=~State)
leaflet(d) %>% addTiles()
leaflet(d) %>% addTiles() %>% addPolylines(popup=~State)
states <- states(cb=T)
library(tigris)
install.packages('tigris')
library(tigris)
states <- states(cb=T)
states
states %>% leaflet() %>% addTiles() %>% addPolygons()
output$states <- renderLeaflet(
# leaflet(d) %>%
#   setView(-96, 37.8, 4) %>%
#   addProviderTiles("MapBox", options = providerTileOptions(
#     id = "mapbox.light",
#     accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
#   addPolygons()
#leaflet(d) %>% addTiles() %>% addPolygons(popup=~State)
states %>% leaflet() %>% addTiles() %>% addPolygons(popup=~NAME)
)
states %>% leaflet() %>% addTiles() %>% addPolygons(popup=~NAME)
summary(d)
output$states <- renderLeaflet(
# leaflet(d) %>%
#   setView(-96, 37.8, 4) %>%
#   addProviderTiles("MapBox", options = providerTileOptions(
#     id = "mapbox.light",
#     accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
#   addPolygons()
#leaflet(d) %>% addTiles() %>% addPolygons(popup=~State)
states %>% leaflet() %>% addTiles() %>% addPolygons(popup=~NAME)
d.state <- d %>% group_by(State) %>% summarize(total=n())
)
d.state <- d %>% group_by(State) %>% summarize(total=n())
d.state
summary(states)
output$states <- renderLeaflet(
# leaflet(d) %>%
#   setView(-96, 37.8, 4) %>%
#   addProviderTiles("MapBox", options = providerTileOptions(
#     id = "mapbox.light",
#     accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
#   addPolygons()
#leaflet(d) %>% addTiles() %>% addPolygons(popup=~State)
states %>% leaflet() %>% addTiles() %>% addPolygons(popup=~NAME)
d.state <- d %>% group_by(State) %>% summarize(total=n())
d.merged <- geo_join(states,d.state,"STUSPS","State")
)
d.merged <- geo_join(states,d.state,"STUSPS","State")
d.merged
palette <- colorNumeric("Greens",domain=d.merged$total)
d.merged <- subset(d.merged, !is.na(total))
d.popup <- paste0("Total: ",as.character(d.merged$total))
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = paltte,
values = d.merged$total,
position = "bottomright",
title = "legend")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(palette = pal,
values = d.merged$total,
position = "bottomright",
title = "legend")
pal <- colorNumeric("Greens",domain=d.merged$total)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = pal,
values = d.merged$total,
position = "bottomright",
title = "legend")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.7,37.09,3.3) %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = pal,
values = d.merged$total,
position = "bottomright",
title = "legend")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.7,37.09,3.5) %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = pal,
values = d.merged$total,
position = "bottomright",
title = "legend")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.7,37.09,3.4) %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = pal,
values = d.merged$total,
position = "bottomright",
title = "legend")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.7,37.09,3.45) %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = pal,
values = d.merged$total,
position = "bottomright",
title = "legend")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.7,37.09,3.5) %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = pal,
values = d.merged$total,
position = "bottomright",
title = "legend")
paste0('mI','fwe')
paste0('mI','fwe',sep="  ")
paste0('mI','fwe',sep=".")
paste('mI','fwe',sep=".")
paste('mI','fwe')
paste('mI','fwe',sep="")
d.popup <- paste(d.merged$NAME," (",as.character(d.merged$total),")",sep="")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.7,37.09,3.5) %>%
addPolygons(data = d.merged,
fillColor = ~pal(d.merged$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~d.popup) %>%
addLegend(pal = pal,
values = d.merged$total,
position = "bottomright",
title = "# Companies")
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
install.packages("shinythemes")
library(shinythemes)
runApp('shiny_project/project')
install.packages("semantic.dashboard")
library(semantic.dashboard)
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
class(d)
class(datatable(d))
disp = d %>% select(rank, title, CEO, CEO.gender, Sector, Industry, City, State)
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('R/Shiny/shinyApps/dashboard_practice')
runApp('R/Shiny/shinyApps/dashboard_practice')
runApp('R/Shiny/shinyApps/shinyDashBoard')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
runApp('shiny_project/project')
rm(list=ls())
runApp('shiny_project/project')
runApp('shiny_project/project')
rm(list=ls())
library(dplyr)
#install.packages('quantmod')
#library(quantmod)
#d <- getSymbols(c("AAPL","IBM"))
# Getting Data
f1000 <- read.csv('./shiny_project/fortune1000-final.csv')
#female <- read.csv('Female_2018_Fortune500.csv')
# Cleaning: female names are without middle names, thus getting rid of middle names from the CEO's title
# inner joining inner_join(x,y,by='name_common_col')
#female.comps <- female %>% select(title=Company)
#f <- inner_join(f500,female.comps)
# another way to find female names is to use package "gender"
#install.packages('gender')
library(gender)
f1000$CEO <- as.character(f1000$CEO)
# Getting rid of initials
firstname = function(full){
split = strsplit(gsub("[.]","",full) , " ",useBytes = TRUE)[[1]]
no.init = split[nchar(split)>1]
return(paste(no.init,collapse=" "))
}
f1000$CEO <- sapply(f1000$CEO,firstname)
# Assigning gender based on first names
gen = function(name){
gen = gender(gsub("^(.*?)\\s.*", "\\1", name,useBytes = TRUE))
#gen = gender(firstname)
ifelse(length(gen)!=1, gen$gender, NA)
}
f1000$CEO.gender <- sapply(f1000$CEO, gen)
rm(list=ls())
library(dplyr)
#install.packages('quantmod')
#library(quantmod)
#d <- getSymbols(c("AAPL","IBM"))
# Getting Data
f1000 <- read.csv('./shiny_project/fortune1000-final.csv')
#female <- read.csv('Female_2018_Fortune500.csv')
# Cleaning: female names are without middle names, thus getting rid of middle names from the CEO's title
# inner joining inner_join(x,y,by='name_common_col')
#female.comps <- female %>% select(title=Company)
#f <- inner_join(f500,female.comps)
# another way to find female names is to use package "gender"
#install.packages('gender')
library(gender)
f1000$CEO <- as.character(f1000$CEO)
# Getting rid of initials
firstname = function(full){
split = strsplit(gsub("[.]","",full) , " ",useBytes = TRUE)[[1]]
no.init = split[nchar(split)>1]
return(paste(no.init,collapse=" "))
}
f1000$CEO <- sapply(f1000$CEO,firstname)
# Assigning gender based on first names
gen = function(name){
gen = gender(gsub("^(.*?)\\s.*", "\\1", name,useBytes = TRUE))
#gen = gender(firstname)
ifelse(length(gen)!=1, gen$gender, NA)
}
f1000$CEO.gender <- sapply(f1000$CEO, gen)
#f500 = f1000[1:500,]
f1000 %>% filter(f1000$CEO.gender=="female") %>% select(title, CEO, CEO.gender)
# manually changing male CEOs with female names
actually.men = c("Satya Nadella","Inge Thulin","Leslie Moonves","Kelly King","Jan Carlson",
"Leslie Wexner","Ajita Rajendra","Ara Hovnanian","Gale Klappa",
"Robin Hayes","Patrice Louvet","Jan Zijderveld")
f1000$CEO.gender[f1000$CEO %in% actually.men] <- "male"
f1000 %>% filter(f1000$CEO.gender=="female") %>% select(title, CEO, CEO.gender)
# writing
setwd("~/Documents/NYCDSA/shiny_project")
write.csv(f1000, file = "f1000.csv", encoding="UTF-8")
runApp('project')
rm(list=ls())
library(dplyr)
#install.packages('quantmod')
#library(quantmod)
#d <- getSymbols(c("AAPL","IBM"))
# Getting Data
f1000 <- read.csv('./shiny_project/fortune1000-final.csv')
#female <- read.csv('Female_2018_Fortune500.csv')
# Cleaning: female names are without middle names, thus getting rid of middle names from the CEO's title
# inner joining inner_join(x,y,by='name_common_col')
#female.comps <- female %>% select(title=Company)
#f <- inner_join(f500,female.comps)
# another way to find female names is to use package "gender"
#install.packages('gender')
library(gender)
f1000$CEO <- as.character(f1000$CEO)
# Getting rid of initials
firstname = function(full){
split = strsplit(gsub("[.]","",full) , " ",useBytes = TRUE)[[1]]
no.init = split[nchar(split)>1]
return(paste(no.init,collapse=" "))
}
f1000$CEO <- sapply(f1000$CEO,firstname)
# Assigning gender based on first names
gen = function(name){
gen = gender(gsub("^(.*?)\\s.*", "\\1", name,useBytes = TRUE))
#gen = gender(firstname)
ifelse(length(gen)!=1, gen$gender, NA)
}
f1000$CEO.gender <- sapply(f1000$CEO, gen)
#f500 = f1000[1:500,]
f1000 %>% filter(f1000$CEO.gender=="female") %>% select(title, CEO, CEO.gender)
# manually changing male CEOs with female names
actually.men = c("Satya Nadella","Inge Thulin","Leslie Moonves","Kelly King","Jan Carlson",
"Leslie Wexner","Ajita Rajendra","Ara Hovnanian","Gale Klappa",
"Robin Hayes","Patrice Louvet","Jan Zijderveld")
f1000$CEO.gender[f1000$CEO %in% actually.men] <- "male"
f1000 %>% filter(f1000$CEO.gender=="female") %>% select(title, CEO, CEO.gender)
# writing
setwd("~/Documents/NYCDSA/shiny_project")
write.csv(f1000, file = "f1000.csv", encoding="UTF-8")
rm(list=ls())
runApp('project')
runApp('project')
runApp('project')
runApp('project')
runApp('project')
runApp('project')
